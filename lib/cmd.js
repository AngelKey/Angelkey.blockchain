// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var Blockchain, base, iced, log, main, minimist, request, request_to_req, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  request = require('request');

  log = require('iced-logger');

  minimist = require('minimist');

  base = require('./base');

  request_to_req = function(request, cb) {
    return function(params, cb) {
      var body, err, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      params.json = true;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/blockchain/src/cmd.iced"
          });
          request(params, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 10
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (res.statusCode !== 200) {
            err = new Error("Non-OK HTTP error: " + res.statusCode);
            body = null;
          }
          return cb(err, res, body);
        };
      })(this));
    };
  };

  Blockchain = (function(_super) {
    __extends(Blockchain, _super);

    function Blockchain(arg) {
      arg.req = request_to_req(request);
      arg.log = log;
      Blockchain.__super__.constructor.call(this, arg);
    }

    return Blockchain;

  })(base.Blockchain);

  exports.main = main = function() {
    var argv, blockchain, chain, err, rc, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    argv = minimist(process.argv.slice(2));
    username = argv._[0];
    (function(_this) {
      return (function(__iced_k) {
        if (username == null) {
          return __iced_k(err = new Error("usage: blockchain <username>"));
        } else {
          blockchain = new Blockchain({
            username: username
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/blockchain/src/cmd.iced"
            });
            blockchain.run(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return chain = arguments[1];
                };
              })(),
              lineno: 36
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        }
      });
    })(this)((function(_this) {
      return function() {
        rc = 0;
        if (typeof err !== "undefined" && err !== null) {
          log.error(err.message);
          rc = -2;
        } else {
          console.log(chain.slice(-1)[0].payload);
        }
        return process.exit(rc);
      };
    })(this));
  };

}).call(this);
